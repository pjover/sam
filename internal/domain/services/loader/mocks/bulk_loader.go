// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	model "github.com/pjover/sam/internal/domain/model"
	mock "github.com/stretchr/testify/mock"

	payment_type "github.com/pjover/sam/internal/domain/model/payment_type"
)

// BulkLoader is an autogenerated mock type for the BulkLoader type
type BulkLoader struct {
	mock.Mock
}

// LoadCustomers provides a mock function with given fields:
func (_m *BulkLoader) LoadCustomers() (map[int]model.Customer, error) {
	ret := _m.Called()

	var r0 map[int]model.Customer
	if rf, ok := ret.Get(0).(func() map[int]model.Customer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]model.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadCustomersAndProducts provides a mock function with given fields:
func (_m *BulkLoader) LoadCustomersAndProducts() (map[int]model.Customer, map[string]model.Product, error) {
	ret := _m.Called()

	var r0 map[int]model.Customer
	if rf, ok := ret.Get(0).(func() map[int]model.Customer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]model.Customer)
		}
	}

	var r1 map[string]model.Product
	if rf, ok := ret.Get(1).(func() map[string]model.Product); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]model.Product)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LoadMonthInvoices provides a mock function with given fields: yearMonth
func (_m *BulkLoader) LoadMonthInvoices(yearMonth model.YearMonth) ([]model.Invoice, error) {
	ret := _m.Called(yearMonth)

	var r0 []model.Invoice
	if rf, ok := ret.Get(0).(func(model.YearMonth) []model.Invoice); ok {
		r0 = rf(yearMonth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Invoice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.YearMonth) error); ok {
		r1 = rf(yearMonth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadMonthInvoicesByPaymentType provides a mock function with given fields: yearMonth
func (_m *BulkLoader) LoadMonthInvoicesByPaymentType(yearMonth model.YearMonth) (map[payment_type.PaymentType][]model.Invoice, error) {
	ret := _m.Called(yearMonth)

	var r0 map[payment_type.PaymentType][]model.Invoice
	if rf, ok := ret.Get(0).(func(model.YearMonth) map[payment_type.PaymentType][]model.Invoice); ok {
		r0 = rf(yearMonth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[payment_type.PaymentType][]model.Invoice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.YearMonth) error); ok {
		r1 = rf(yearMonth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadMonthInvoicesCustomersAndProducts provides a mock function with given fields: yearMonth
func (_m *BulkLoader) LoadMonthInvoicesCustomersAndProducts(yearMonth model.YearMonth) ([]model.Invoice, map[int]model.Customer, map[string]model.Product, error) {
	ret := _m.Called(yearMonth)

	var r0 []model.Invoice
	if rf, ok := ret.Get(0).(func(model.YearMonth) []model.Invoice); ok {
		r0 = rf(yearMonth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Invoice)
		}
	}

	var r1 map[int]model.Customer
	if rf, ok := ret.Get(1).(func(model.YearMonth) map[int]model.Customer); ok {
		r1 = rf(yearMonth)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[int]model.Customer)
		}
	}

	var r2 map[string]model.Product
	if rf, ok := ret.Get(2).(func(model.YearMonth) map[string]model.Product); ok {
		r2 = rf(yearMonth)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(map[string]model.Product)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(model.YearMonth) error); ok {
		r3 = rf(yearMonth)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// LoadProducts provides a mock function with given fields:
func (_m *BulkLoader) LoadProducts() (map[string]model.Product, error) {
	ret := _m.Called()

	var r0 map[string]model.Product
	if rf, ok := ret.Get(0).(func() map[string]model.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]model.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
